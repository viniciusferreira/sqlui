<H1>SQLui 1.0</H1>
	
	<H2>SQL user interface for JSON</H2>
	
	<BLOCKQUOTE><P>By Spiderpoison is licensed under a License Creative Commons Attribution-non-Commercial Share-ShareAlike 3.0 License based on a work at sqlui.sourceforge.net.</P></BLOCKQUOTE>
	
	<H2 align=center>Feel free to use these scripts how to give in the tile!!!</H2>
	
	<H3>FOREWORD</H3>

		<BLOCKQUOTE><P>
		The SQLui was created to facilitate the work of developers working with JSON files.<BR>
		The sqlui.class.php class can be used in any script in PHP to faciliar creating and manipulating JSON data files.<BR>
		SQLui is an alternative for developers who do not want to use a conventional base or NoSQL data.<BR>
		<BR>
		One minimal of knowledge about PHP, SQL and JSON is expected to interpret this manual.
		</P></BLOCKQUOTE>
		
	<H3>GETTING STARTED</H3>
	
		<BLOCKQUOTE><P>
		All SQL statements must be written in capital letters.<BR>
		All references to fields and tables must be carried out with lower case letters.<BR>
		All records should be treated as strings.<BR>
		There should be no line breaks in query.<BR>
		<BR>
		The command will always return an array containing the key and the records, how to you can see in the example below.<BR>
		<BR>
	<PRE class=block>
	<B>Query:</B> SELECT * FROM test		
	<B>Return:</B> Array(
			[0] => Array(
					[field_name] => value
					[field_name] => value
					...
				)							
			[1] => Array(
					[field_name] => value
					[field_name] => value
					...
				)							
			)
	</PRE>
		The class yet can return arrays with <I>'notice'</I> or <I>'error'</I> in the case of failures.<BR>

	<PRE class=block>
	<B>Query:</B> CREATE TABLE users			
	<B>Return:</B> Array(
			[error] => Array(
				[0] => Table users already exists
			)
		)						
	</PRE>
		or
	<PRE class=block>
	<B>Query:</B> CREATE TABLE test		
	<B>Return:</B> Array(
			[notice] => Array(
				[0] => Command Successfully
			)
		)
	</PRE>					
		</BLOCKQUOTE></P>				
	<H3>HOW TO DO?</H3>
		<BLOCKQUOTE><P>
		By placing the files on the server and run the first access, you will automatically create a directory "database" with JSON files "users.json" and "levels.json".<BR>
		<BR>
		You must configure the permissions of access to server files to maintain content integrity.<BR>
		<BR>
		If you want to change or enter a new user the password, field password must be encrypted as follows below:<BR>
			<PRE class=block>
			$your_passrowd = SHA1(MD5('Your Password'));
			</PRE>
		After initial setup you can use the system via the web interface, posting commands directly into the bar, or load the class in your PHP script.<BR>
		<BR>
		To load the class add this command below.<BR>
	<PRE class=block>
	$sqlui=false;
	if (!$sqlui) $sqlui = new SQLui();
	$sqlui->Connect('your_user','your_password');
	$sqlui->Database('your_database');<
	</PRE>
		Default user and password are respectively 'root' and 'pass'.<BR>
		All user validations will be made in databases/sqlui/users.json, so, to add or remove access to the system, manipulate this table.<BR>
			<BLOCKQUOTE>Example:<BR>	
	<PRE class=block>
	$command=$sqlui->Command("UPDATE users SET password='".SHA1(MD5('Your new password'))."' WHERE id='0'");
	</PRE>
			Return:
	<PRE class=block>
	$comand=Array(
		[notice] => Array(
			[0] => Command Successfully
		)						
	)
	</PRE>
	And to read the records:	
	<PRE class=block>
	foreach($command as $value){
			echo $value[col_name];
		}
	</PRE>
			And this print				
	<PRE class=block>
	Command Successfully
	</PRE>			
		</BLOCKQUOTE>
	</BLOCKQUOTE></P>				
	<H2>DEFINITIONS, STATEMENTS AND SYNTAX</H2>
		<BLOCKQUOTE><P>
		Commands in brackets are optional.<BR>
		The items inside braces are required.<BR>
		All posted values should be treated as strings between single or double quotes.<BR>
		<BR>
		
		<H3>SHOW TABLES Syntax</H3>
		<BLOCKQUOTE>
		Displays database tables.		
		</BLOCKQUOTE>
	<PRE class=block>
	SHOW TABLES
	
		<B>Query:</B> SHOW TABLES
		<B>Return:</B> Array(
				[0] => Array(
					[0] => levels
					[1] => users
				)
			)
	</PRE>
	
		<H3>CREATE TABLE Syntax</H3>
		<BLOCKQUOTE>
		Creates a new table.		
		</BLOCKQUOTE>
	<PRE class=block>
	CREATE {tbl_name({col[,col...]})
	
		<B>Query:</B> CREATE TABLE test
		<B>Return:</B> Array(
				[notice] => Array(
					[0] => Command Successfully
				)
			)	
	</PRE>
			
		<H3>DROP TABLE Syntax</H3>
		<BLOCKQUOTE>
		Delete a table.		
		</BLOCKQUOTE>
		
	<PRE class=block>
	DROP TABLE {tbl_name}
	
		<B>Query:</B> DROP TABLE test
		<B>Return:</B> Array(
				[notice] => Array(
					[0] => Command Successfully
				)
			)
	</PRE>
			
		<H3>ALTER TABLE Syntax</H3>
		<BLOCKQUOTE>
		Changes a table structure.
		</BLOCKQUOTE>
	<PRE class=block>
	ALTER TABLE {tbl_name}
		{ADD|DROP col_name[col_name...]}|{CHANGE col_name new_name[,col_name new_name...]}
		
		<B>Query:</B> ALTER TABLE test ADD field
		<B>Query:</B> ALTER TABLE test DROP field
		<B>Query:</B> ALTER TABLE test CHANGE field_1 new_name_1,field_2 new_name_2
		<B>Return:</B> Array(
				[notice] => Array(
					[0] => Command Successfully
				)
			)
	</PRE>
			
		<H3>TRUNCATE Syntax</H3>
		<BLOCKQUOTE>
		Truncate a table.
		</BLOCKQUOTE>
	<PRE class=block>
	TRUNCATE {tbl_name}
	
		<B>Query:</B> TRUNCATE test
		<B>Return:</B> Array(
				[notice] => Array(
					[0] => Command Successfully
				)
			)
	</PRE>
		
		<H3>SELECT Syntax</H3>
		<BLOCKQUOTE>	
		Select the contents of a table.
		</BLOCKQUOTE>	
	<PRE class=block>	
	SELECT [DISTINCT] [COUNT] {tbl_name.col_name|col_name|*}
		FROM {tbl_name} [[LEFT]JOIN {join_tbl_name} ON {where_condition}]
			[WHERE {where_condition}]
				[ORDER BY {col_name}[ASC | DESC]]
				[LIMIT {[offset,]row_count}]
				[INTO 'file_name']
				
				
	<B>Query:</B> SELECT tbl1.col,tbl2.col FROM tbl1 JOIN tbl2 ON tbl2.col=tbl1.col LIMIT 2
	<B>Return:</B> Array(
			[0] => Array(
				[tbl1.col] => string
				[tbl2.col] => string
			)
			[1] => Array(
				[tbl1.col] => string
				[tbl2.col] => string
			)
		)		
	</PRE>
			
		<H3>COUNT Syntax</H3>
		
		<BLOCKQUOTE>
		Return a count matches a query.
		</BLOCKQUOTE>
		
	<PRE class=block>
	COUNT(col_name[,col_name...]|*)
	
		<B>Query:</B> SELECT COUNT(*) FROM tbl1
		<B>Return:</B> Array(
				[0] => Array (
					[count] => 1
				)
			)
	</PRE>	

		<H3>WHERE Syntax</H3>
		<BLOCKQUOTE>
		Used to filter records.
		</BLOCKQUOTE>
	<PRE class=block>	
	WHERE {tbl_name.col_name|col_name}{operator}{'string'}
		[{AND|OR} {tbl_name.col_name|col_name}{operator}{'string'}...]
	</PRE>		
		<BLOCKQUOTE>
		Where operators are.
		</BLOCKQUOTE> 		
	<PRE class=block>	= 	-	equal
	<>	-	not equal
	!=	-	not equal
	>	-	greater than
	<	-	less than	
	>=	-	greater than or equal
	<=	-	less than or equal
	LIKE	-	search for a pattern	
	
		<B>Query:</B> SELECT col FROM tbl WHERE col='needle'
		<B>Return:</B> Array(
				[0] => Array (
					[col] => needle
				)
				[1] => Array (
					[col] => needle
				)
			)
		</PRE>
		
	<H3>LIKE Syntax</H3>
		<BLOCKQUOTE>
		Used to filter records using a pattern.
		</BLOCKQUOTE>
	<PRE class=block>	
	[NOT] LIKE {'[operator]string[operator]'}		
	</PRE>	
		<BLOCKQUOTE>
		Where, operators are a signal %, and can be used this way.
		</BLOCKQUOTE> 		
	<PRE class=block>	'string%'	-	starting with
	'%string'	-	ends
	'%string%'	-	contains
	
		<B>Query:</B> SELECT col FROM tbl WHERE col LIKE 'ne%'
		<B>Return:</B> Array(
				[0] => Array (
					[col] => needle
				)
				[1] => Array (
					[col] => never
				)
				[1] => Array (
					[col] => next
				)
			)
		</PRE>
		
		
		<H3>INSERT INTO Syntax</H3>
		<BLOCKQUOTE>
		Insert new records in a table.		
		</BLOCKQUOTE>
	<PRE class=block>
	INSERT INTO {tbl_name[(col_name,...)]}
		VALUES{('string'[,'string'...])}[,('string'[,'string'...])]
				
		<B>Query:</B> INSERT INTO tbl(id,name) VALUES('0','name 0')
		<B>Return:</B> Array(
				[notice] => Array (
					[0] => Command Successfully
				)
			)	
	</PRE>
		<BLOCKQUOTE>
		When you insert more than one record, use this syntax to make the process faster.
		</BLOCKQUOTE>
	<PRE>
		<B>Query:</B> INSERT INTO tbl VALUES('0','name 0'),('1','name 1'),('2','name 2')
		<B>Return:</B> Array(
				[notice] => Array (
					[0] => Command Successfully
				)
			)	
	</PRE>
		<H3>UPDATE Syntax</H3>
		<BLOCKQUOTE>
		Update records in a table.
		</BLOCKQUOTE>
	<PRE class=block>
	UPDATE {tbl_name} SET col_name1={'string'}[,col_name2={'string'}...]
		[WHERE {where_condition}]
		
		<B>Query:</B> UPDATE tbl SET col1='string',col2="string" WHERE col1='test'
		<B>Return:</B> Array(
				[notice] => Array (
					[0] => Command Successfully
				)
			)
	</PRE>
    
		<H3>DELETE Syntax</H3>		
		<BLOCKQUOTE>
		Delete records in a table.
		</BLOCKQUOTE>
		
	<PRE class=block>
	DELETE {col_name|*} FROM {tbl_name} [WHERE where_condition]
	
		<B>Query:</B> DELETE col FROM tbl WHERE col='test'
		<B>Return:</B> Array(
				[notice] => Array (
					[0] => Command Successfully
				)
			)
	</PRE>
		
		</BLOCKQUOTE></P>
		
<P align=right>© 2015 SQLui. All rights reserved.</P>
